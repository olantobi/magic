
/*
 * Macro for Hyper IDE that creates a Bazar app from your module.
 */
.name:Release module to Bazar
.description:"Macro for Hyper IDE that creates a Bazar app package from your module and copies the Bazar ZIP file to your local Bazar allowing others to install it from you. Notice, you should probably run the 'ensure-database' macro first if your app depends upon a database to function correctly."
.arguments
   .
      name:name
      type:string
      description:"Your module's friendly name"
      mandatory:bool:true
   .
      name:module
      type:string
      description:"Your module's main root folder"
      mandatory:bool:true
   .
      name:description
      type:string
      description:A friendly descriptive text providing some description to others wanting to install your module
      mandatory:bool:false
   .
      name:version
      type:string
      description:Version you are deploying
      mandatory:bool:true
      default:v1.0.0
   .
      name:requires
      type:string
      description:Version of Magic this module depends upon in order to work correctly
      mandatory:bool:true
      default:v9.4.5
   .
      name:publisher
      type:string
      description:Email address you want to associate with module. Typically your email address.
      mandatory:bool:false
      default:foo@bar.com
   .
      name:readme
      type:string
      description:"The URL to your module's README.md file"
      mandatory:bool:false
   .
      name:git
      type:string
      description:"Your module's git repository"
      mandatory:bool:false

/*
 * Lambda object executed as macro is actually executed.
 */
.lambda

   /*
    * Sanity checking invocation.
    */
   validators.mandatory:x:@.arguments/*/module
   validators.mandatory:x:@.arguments/*/version
   validators.mandatory:x:@.arguments/*/requires
   validators.mandatory:x:@.arguments/*/name
   validators.regex:x:@.arguments/*/module
      regex:^[a-zA-Z0-9_-]+$
   validators.regex:x:@.arguments/*/version
      regex:"^v[0-9]+\\.[0-9]+\\.[0-9]+$"
   validators.regex:x:@.arguments/*/requires
      regex:"^v[0-9]+\\.[0-9]+\\.[0-9]+$"

   /*
    * Figuring out module's complete path.
    */
   .module-path
   set-value:x:@.module-path
      strings.concat
         .:/modules/
         get-value:x:@.arguments/*/module
         .:/

   /*
    * Making sure that module exists.
    */
   if
      not
         io.folder.exists:x:@.module-path
      .lambda

         // No such module
         strings.concat
            .:"The module called '"
            get-value:x:@.arguments/*/module
            .:"' does not exist"
         throw:x:-
            public:bool:true
            status:int:404

   /*
    * Loading all files within module recursively.
    */
   unwrap:x:+/*
   signal:magic.io.file.load-recursively
      .:x:@.module-path

   /*
    * Iterating through each file above, stripping its root folder,
    * and adding to zip stream below.
    */
   for-each:x:@signal/*
      set-value:x:@.dp/#
         strings.replace:x:@.dp/#
            .:/modules
            .:
      add:x:@.lambda/*/io.content.zip-stream
         get-nodes:x:@.dp/#

   /*
    * Zipping file.
    */
   io.content.zip-stream

   /*
    * Figuring out filename to use.
    */
   .filename
   .only-filename
   set-value:x:@.only-filename
      strings.concat
         get-value:x:@.arguments/*/module
         .:-
         get-value:x:@.arguments/*/version
         .:.zip
   set-value:x:@.filename
      strings.concat
         .:/misc/bazar/apps/
         get-value:x:@.only-filename

   /*
    * Saving ZIP stream and closing it.
    *
    * Technically this isn't necessary since the stream is memory based,
    * but cleaning up things doesn't hurt either ...
    */
   io.stream.save-file:x:@.filename
      get-value:x:@io.content.zip-stream
   io.stream.close:x:@io.content.zip-stream

   /*
    * Figuring out which database module supports, which depends upon whether
    * module has module.mssql.sql and module.mysql.sql files in 'magic.startup' folder.
    */
   strings.concat
      .:/modules/
      get-value:x:@.arguments/*/module
      .:/magic.startup/
      get-value:x:@.arguments/*/module
      .:.mssql.sql
   if
      io.file.exists:x:@strings.concat
      .lambda
         add:x:@.lambda/**/database_support
            .
               .:mssql
   strings.concat
      .:/modules/
      get-value:x:@.arguments/*/module
      .:/magic.startup/
      get-value:x:@.arguments/*/module
      .:.mssql.sql
   if
      io.file.exists:x:@strings.concat
      .lambda
         add:x:@.lambda/**/database_support
            .
               .:mssql

   /*
    * Dynamically building our download zip file URL.
    */
   request.scheme
   request.host
   .url
   set-value:x:@.url
      strings.concat
         get-value:x:@request.scheme
         .:"://"
         get-value:x:@request.host
         .:"/magic/modules/system/bazar/get-app?app="
         strings.url-encode:x:@.only-filename

   /*
    * Checking if caller supplied a description.
    */
   if
      exists:x:@.arguments/*/description
      .lambda
         add:x:@.lambda/@.lambda/**/database_support/.
            get-nodes:x:@.arguments/*/description

   /*
    * Checking if caller supplied a git repo.
    */
   if
      exists:x:@.arguments/*/git
      .lambda
         add:x:@.lambda/@.lambda/**/database_support/.
            get-nodes:x:@.arguments/*/git

   /*
    * Checking if caller supplied a README URL.
    */
   if
      exists:x:@.arguments/*/readme
      .lambda
         add:x:@.lambda/@.lambda/**/database_support/.
            get-nodes:x:@.arguments/*/readme

   /*
    * Checking if app is not dependent upon any databases, at which
    * point we remove entire [database_support] node for app's manifest.
    */
   if
      not
         exists:x:@.lambda/**/database_support/*
      .lambda
         remove-nodes:x:@.lambda/@.lambda/**/database_support

   /*
    * This becomes our Bazar published manifest.
    */
   .published

   /*
    * Checking if there already exists a 'published.hl' file
    * being our Bazar manifest file.
    */
   if
      io.file.exists:/misc/bazar/published.hl
      .lambda

         /*
          * Appending module to app manifest for server.
          */
         io.file.load:/misc/bazar/published.hl
         hyper2lambda:x:@io.file.load

         /*
          * Removing any existing apps with the same module name.
          */
         .x
         set-value:x:@.x
            strings.concat
               .:@hyper2lambda/*/*/module_name/=
               get-value:x:@.arguments/*/module
               .:/.
         set-x:x:./*/remove-nodes
            convert:x:@.x
               type:x
         remove-nodes

         /*
          * Removing any existing apps with the same module name.
          */
         add:x:@.published
            get-nodes:x:@hyper2lambda/*

   /*
    * Adding currently created app to manifest and saving published manifest file.
    */
   unwrap:x:+/*/*/*
   add:x:@.published
      .
         .
            name:x:@.arguments/*/name
            module_name:x:@.arguments/*/module
            version:x:@.arguments/*/version
            url:x:@.url
            requires:x:@.arguments/*/requires
            type:module
            publisher:x:@.arguments/*/publisher
            database_support
   lambda2hyper:x:@.published/*
   io.file.save:/misc/bazar/published.hl
      get-value:x:@lambda2hyper

   /*
    * Doing some basic logging.
    */
   log.info
      .:"Application released to local Bazar, module name was '"
      get-value:x:@.arguments/*/module
      .:"', local filename was '"
      get-value:x:@.only-filename
      .:"' and version was '"
      get-value:x:@.arguments/*/version
      .:"'"

   /*
    * Making sure we inform caller that he needs to refresh his folders.
    */
   set-value:x:@.lambda
      .:folders-changed
