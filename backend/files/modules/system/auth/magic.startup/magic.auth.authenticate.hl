
/*
 * Authenticates the user with the specified [username] and [password] combination.
 *
 * Notice, if [check-password] is false, we don't check the user's password, and
 * if [reset-password] is true, we generate a JWT token that can only be used to
 * change the user's password. The latter allows us to generated "change password links"
 * in the frontend, and similar type of logic.
 */
slots.create:magic.auth.authenticate


   /*
    * Checking if JWT secret has been changed, and
    * if not, simply checking if username/password is
    * root/root.
    */
   config.get:"magic:auth:secret"
   if
      eq
         get-value:x:@config.get
         .:THIS-IS-NOT-A-GOOD-SECRET-PLEASE-CHANGE-IT
      .lambda

         /*
          * System has not yet been setup.
          */
         if
            and
               eq
                  get-value:x:@.arguments/*/username
                  .:root
               eq
                  get-value:x:@.arguments/*/password
                  .:root
            .lambda

               // Success!
               auth.ticket.create
                  username:root
                  roles
                     .:root
               unwrap:x:+/*
               return
                  ticket:x:@auth.ticket.create

         else

            // Failure!
            throw:Access denied
               status:int:401
               public:bool:true


   /*
    * If we came this far, the system has been setup,
    * and we can check the 'magic' database to see if
    * the credentials the caller provided is correct.
    */


   /*
    * Opens up our database connection.
    */
   data.connect:magic


      /*
       * Selects the user with the given username from our table.
       */
      data.read
         table:users
         columns
            password
         where
            and
               username:x:@.arguments/*/username
               locked.neq:1


      /*
       * Checking if user with specified [username] exists.
       */
      if
         eq
            get-count:x:@data.read/*
            .:int:0
         .lambda


            /*
             * No such user.
             */
            throw:Access denied
               status:int:401
               public:bool:true


      /*
       * This part exchanges the invocation to [crypto.password.verify] below,
       * but only if a configuration setting is found to be overriding the default
       * implementation from your "appsettings.json" file.
       */
      config.get:"magic:auth:authentication"
      if
         and
            not
               eq
                  get-value:x:@config.get
                  .
            not
               eq
                  get-value:x:@config.get
                  .:
            not
               eq
                  get-value:x:@config.get
                  .:crypto.password.verify
         .lambda


            /*
             * User has overridden the default password authentication slot invocation.
             * Hence we replace the existing invocation to [crypto.password.verify]
             * with the slot found from the "appsettings.json" file.
             *
             * This is the part that basically allows for external username/password verifications,
             * including using AD/Windows authentication, etc.
             */
            strings.split:x:@config.get
               .:":"
            set-name:x:+/+/*/*
               get-value:x:@strings.split/0
            set-value:x:+/*/*
               get-value:x:@strings.split/1
            insert-after:x:@if/./**/crypto.password.verify
               .
                  foo
                     username:x:@.arguments/*/username
                     password:x:@.arguments/*/password
            remove-nodes:x:@if/./**/crypto.password.verify


      /*
       * Verify we have a password match, unless [check-password] was false,
       * which might occur if a JWT token is generated on behalf of another user.
       */
      if
         or
            eq
               get-value:x:@.arguments/*/check-password
               .:bool:false
            crypto.password.verify:x:@.arguments/*/password
               hash:x:@data.read/*/*/password
         .lambda


            /*
             * Password is matching hashed value from database, or caller
             * does not want to verify password.
             *
             * Now checking if this is a request for a "change password link".
             */
            if
               eq
                  get-value:x:@.arguments/*/reset-password
                  .:bool:true
               .lambda


                  /*
                   * Caller requested a "reset password link", hence
                   * we add the user to the "reset-password" role, and
                   * the [old-password] role, which we check when user
                   * actually attempts to change his password, to make sure one
                   * reset password link can only be used once.
                   *
                   * Hashing the password might be a bit overkill here, since
                   * it's already hashed in the database - However, we can't be
                   * too cautious.
                   */
                  crypto.hash:x:@data.read/*/*
                  unwrap:x:+/*/*
                  add:x:+/*/roles
                     .
                        .:x:@crypto.hash
                  auth.ticket.create
                     username:x:@.arguments/*/username
                     roles
                        .:reset-password


                  /*
                   * Logging the fact that we generated a reset-password token.
                   */
                  log.info
                     .:"Reset password token successfully generated for user '"
                     get-value:x:@.arguments/*/username
                     .:"'"


                  /*
                   * Returning results back to caller.
                   */
                  unwrap:x:+/*
                  return
                     ticket:x:@auth.ticket.create


            else


               /*
                * Now we need to select all roles user belongs to.
                */
               data.read
                  table:users_roles
                  columns
                     role
                  where
                     and
                        user:x:@.arguments/*/username


               /*
                * Then we can create our JWT token/ticket.
                */
               add:x:+/*/roles
                  get-nodes:x:@data.read/*/*
               auth.ticket.create
                  username:x:@.arguments/*/username
                  expires:x:@.arguments/*/expires
                  roles


               /*
                * Logging the fact that user successfully logged in.
                */
               log.info
                  .:"We successfully authenticated user '"
                  get-value:x:@.arguments/*/username
                  .:"'"


               /*
                * Returning results back to caller.
                */
               unwrap:x:+/*
               return
                  ticket:x:@auth.ticket.create


      else


         /*
          * Hash version of password didn't match.
          */
         throw:Access denied
            status:int:401
            public:bool:true
