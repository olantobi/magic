
/*
 * Lists all database in your installation.
 */
.arguments
   databaseType:string
   connectionString:string
.description:"Returns all databases in your installation, according to the arguments specified."

/*
 * Ensures user is authorized to access endpoint.
 */
auth.ticket.verify:root


/*
 * Sanity checking invocation.
 */
validators.mandatory:x:@.arguments/*/databaseType
validators.mandatory:x:@.arguments/*/connectionString
validators.enum:x:@.arguments/*/databaseType
   .:mysql
   .:mssql


/*
 * Since this endpoint is quite expensive to invoke, we cache its result
 * for 10 hours on the server side.
 */
strings.concat
   .:magic.sql.databases.
   get-value:x:@.arguments/*/databaseType
   :.
   get-value:x:@.arguments/*/connectionString
unwrap:x:../*/cache.try-get/**/.databaseType
unwrap:x:../*/cache.try-get/**/.connection-string
cache.try-get:x:@strings.concat
   expiration:36000
   .lambda


      /*
       * Invokes slots.create responsible for returning our database names,
       * and returns results to caller.
       */
      .databaseType:x:@.arguments/*/databaseType
      .connection-string:x:@.arguments/*/connectionString
      strings.concat
         .:magic.db.
         get-value:x:@.databaseType
         .:.databases
      unwrap:x:+/*
      signal:x:@strings.concat
         connection-string:x:@.connection-string


      /*
       * Creating our return value.
       */
      .result
      for-each:x:@signal/*/*
         set-value:x:@.dp/#
            strings.to-lower:x:@.dp/#
         set-name:x:@.dp/#
            .:database
         unwrap:x:+/*/*/*
         add:x:@.result
            .
               .
                  name:x:@.dp/#
                  tables
      for-each:x:@.result/*
         try
            strings.concat
               .:magic.db.
               get-value:x:@.databaseType
               .:.tables
            unwrap:x:+/*
            signal:x:@strings.concat
               connection-string:x:@.connection-string
               database:x:@.dp/#/*/name
            for-each:x:@signal/*
               unwrap:x:+/*/*/*
               add:x:@for-each/@.dp/#/*/tables
                  .
                     .
                        name:x:@.dp/#/*/table
                        columns
               strings.concat
                  .:magic.db.
                  get-value:x:@.databaseType
                  .:.columns
               unwrap:x:+/*
               signal:x:@strings.concat
                  connection-string:x:@.connection-string
                  database:x:@for-each/@.dp/#/*/name
                  table:x:@.dp/#/*/table
               for-each:x:@signal/*
                  unwrap:x:+/*/*/*
                  add:x:@for-each/@for-each/@.dp/#/*/tables/0/-/*/columns
                     .
                        .
                           name:x:@.dp/#/*/name
                           db:x:@.dp/#/*/db
                           nullable:x:@.dp/#/*/nullable
                           primary:x:@.dp/#/*/primary
                           automatic:x:@.dp/#/*/automatic
                           hl:x:@.dp/#/*/hl
         .catch

            // Silently ignoring, after logging, probably don't have access to database.
            log.info:x:@.arguments/*/message


      /*
       * Returning database to caller.
       */
      add:x:+/*
         get-nodes:x:@.result/*
      return
         databases


/*
 * Returning results to caller.
 */
add:x:+
   get-nodes:x:@cache.try-get/#/*
return
