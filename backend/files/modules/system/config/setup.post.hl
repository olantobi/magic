
/*
 * This file will setup your system, changing its default JWT secret,
 * create the magic database, and insert a root user - Unless the
 * database, and/or root user exists from before.
 *
 * Notice, if the root user exists from before, this file will change
 * its password - However, you cannot setup the system twice, unless you
 * manually change the JWT secret to its default value, which
 * is 'THIS-IS-NOT-A-GOOD-SECRET-PLEASE-CHANGE-IT'.
 */
.arguments
   databaseType:string
   password:string
   settings:string
.description:Setup authentication and other parts of the system according to the arguments provided


/*
 * Sanity checks invocation.
 */
validators.enum:x:@.arguments/*/databaseType
   .:mysql
   .:mssql


/*
 * Ensures user is authorized to access endpoint.
 */
auth.ticket.verify:root


/*
 * Making sure we're able to return exceptions to caller.
 */
try

   /*
    * Checking if JWT secret has been changed, and
    * if is has, we throw an exception, to prevent the
    * system from being setup again, overriding the default
    * setup configuration.
    */
   config.get:"magic:auth:secret"
   if
      not
         eq
            get-value:x:@config.get
            .:THIS-IS-NOT-A-GOOD-SECRET-PLEASE-CHANGE-IT
      .lambda

         // System has been setup before
         throw:Your system has already been setup
            status:401
            public:true

   /*
    * Saving settings to appsettings.json file.
    *
    * Notice, this has to be done before we check if database exists,
    * otherwise it'll not be possible to login to database to check
    * if magic database already exists.
    *
    * Hence, without this step first, there is no way to use for instance a MySQL
    * instance that doesn't have the same root password as the default password
    * from the appSettings.json file.
    */
   json2lambda:x:@.arguments/*/settings

   /*
    * Testing connection string before we save it, to make sure
    * it is functioning. This part will throw if connection string is
    * not valid.
    */
   try

      switch:x:@.arguments/*/databaseType

         case:mssql
            strings.replace:x:@json2lambda/*/magic/*/databases/*/mssql/*/generic
               .:{database}
               .:master
            mssql.connect:x:@strings.replace
               mssql.select:select name from master.dbo.sysdatabases

         case:mysql
            strings.replace:x:@json2lambda/*/magic/*/databases/*/mysql/*/generic
               .:{database}
               .:information_schema
            mysql.connect:x:@strings.replace
               mysql.select:show databases

   .catch

      throw:Could not connect to database, please double check your connection string
         public:true
         status:400

   /*
    * Connection string is valid and able to connect to a database,
    * hence we can safely save the appsettings.json file now.
    */
   set-value:x:@json2lambda/*/magic/*/databases/*/default
      get-value:x:@.arguments/*/databaseType
   lambda2json:x:@json2lambda/*
      format:true
   config.save:x:-

   /*
    * Sleeping for 5 seconds to allow configuration to kick
    * in on thread pools threads.
    */
   sleep:5000

   /*
    * We now have a new JWT/AUTH secret, and a database connection string
    * that we know we can use to connect to either a MySQL server or an
    * MS SQL server. Hence, now we can start the setup process, creating the
    * magic database, and inserting a root user, etc ...
    */

   /*
    * Retrieving all databases from selected database type,
    * to see if 'magic' database has previously been created.
    *
    * If not, we create the 'magic' database using the specialised
    * schema declaration SQL file for the database type, and we later
    * insert a default user into its 'user' table.
    */
   strings.concat
      .:magic.db.
      get-value:x:@.arguments/*/databaseType
      .:.databases
   signal:x:-

   /*
    * Checking if magic was returned from above invocation.
    */
   if
      not
         exists:x:@signal/*/*/=magic
      .lambda

         /*
          * Database does not exist.
          *
          * Evaluating SQL script that creates our database, but first we must dynamically
          * determine which script to execute.
          */
         strings.concat
            .:/misc/
            get-value:x:@.arguments/*/databaseType
            .:/magic.sql

         /*
          * Loading create database SQL script file, and replacing execution slots according
          * to which database type we're dealing with.
          */
         io.file.load:x:@strings.concat

         /*
          * Notice, for MS SQL we need to explicitly invoke [mssql.execute-batch] to
          * accommodate for "go" statements and such.
          */
         switch:x:@.arguments/*/databaseType

            /*
             * Special case for MS SQL, to execute "batch" slot.
             */
            case:mssql

               set-name:x:./././*/xxx.connect/*/xxx.execute
                  .:mssql.execute-batch

            /*
             * Anything but MS SQL.
             */
            default

               set-name:x:./././*/xxx.connect/*/xxx.execute
                  strings.concat
                     get-value:x:@.arguments/*/databaseType
                     .:.execute

         /*
          * Modifying the connect slot according to database type specified.
          */
         set-name:x:./*/xxx.connect
            strings.concat
               get-value:x:@.arguments/*/databaseType
               .:.connect

         /*
          * Executing create database SQL script.
          */
         xxx.connect
            xxx.execute:x:@io.file.load

         /*
          * Inserting root user.
          */
         unwrap:x:+/*
         signal:magic.auth.create-user
            username:root
            password:x:@.arguments/*/password
            database-type:x:@.arguments/*/databaseType
            roles
               .:root

   else

      /*
       * Database already exists, so we simply change root user's password
       * according to arguments specified.
       */
      unwrap:x:+/*
      signal:magic.auth.change-password
         password:x:@.arguments/*/password
         database-type:x:@.arguments/*/databaseType

      /*
       * Then we need to make sure we run any database migration scripts.
       */
      io.file.execute:/modules/system/magic.startup/migrate-magic-database.hl

   /*
    * Logging the fact that system was setup.
    */
   log.info:System was successfully setup

   /*
    * After setup we need to run setup process for all modules in system,
    * besides magic and system.
    */
   io.folder.list:/modules/
   for-each:x:@io.folder.list/*
      strings.split:x:@.dp/#
         .:/
      if
         and
            not
               eq
                  get-value:x:@strings.split/1
                  .:magic
            not
               eq
                  get-value:x:@strings.split/1
                  .:system
         .lambda

            /*
             * Installing module, ensuring we trap exceptions in the process.
             */
            try

               /*
                * Installing module.
                */
               unwrap:x:+/*
               signal:magic.modules.install-module
                  module:x:@strings.split/1

               /*
                * Doing some basic logging.
                */
               log.info
                  .:"Module successfully installed, module name was '"
                  get-value:x:@strings.split/1
                  .:"'"

            .catch

               /*
                * Oops, making sure we log failure.
                */
               log.error
                  .:"Module failed to install, module name was '"
                  get-value:x:@strings.split/1
                  .:"'\r\n\r\nMessage from system was '"
                  get-value:x:@.arguments/*/message
                  .:"'"

   /*
    * Explicitly seeding CSRNG with auth secret, which might have been manually applied
    * by user during setup process.
    */
   config.get:"magic:auth:secret"
   crypto.seed:x:-
   log.info:CSRNG successfully seeded with your auth secret

   /*
    * Starting scheduler.
    */
   scheduler.start

   /*
    * Authenticating user and returning new JWT token to client.
    */
   unwrap:x:+/*
   signal:magic.auth.authenticate
      username:root
      password:x:@.arguments/*/password

   /*
    * Returns the authentication JWT ticket created above to caller.
    */
   return-nodes:x:@signal/*

.catch

   // Making sure we make exception publicly visible for frontend.
   throw:x:@.arguments/*/message
      public:true
      status:400
