
/*
 * Installs the specified module.
 *
 * Arguments.
 *
 * - [module] - Name of module to install.
 */
slots.create:magic.modules.install-module

   /*
    * Sanity checking invocation.
    */
   validators.mandatory:x:@.arguments/*/module

   /*
    * Loops through all files recursively from within the module's
    * "magic.startup" folder.
    */
   strings.concat
      .:/modules/
      get-value:x:@.arguments/*/module
      .:/
   io.folder.list:x:-

   /*
    * Looping through results from above, to check if we have a
    * "magic.startup" folder within module.
    */
   for-each:x:@io.folder.list/*
      strings.split:x:@.dp/#
         .:/
      if
         eq
            get-value:x:@strings.split/0/-
            .:magic.startup
         .lambda

            /*
             * Found a "magic.startup" folder in module's main folder,
             * making sure we execute all files within it recursively.
             */
            unwrap:x:+/*
            signal:magic.io.file.list-recursively
               .:x:@.dp/#
            for-each:x:@signal/*
               if
                  strings.ends-with:x:@.dp/#
                     .:.hl
                  .lambda
                     io.file.execute:x:@.dp/#

            /*
             * Looping through all sub-folders/modules of module.
             */
            io.folder.list:x:@.dp/#
            for-each:x:@io.folder.list/*
               strings.split:x:@.dp/#
                  .:/
               if
                  eq
                     get-value:x:@strings.split/0/-
                     .:magic.startup
                  .lambda

                     /*
                      * Sub folder "magic.startup" folder of module, making sure we execute
                      * all files within it recursively.
                      */
                     unwrap:x:+/*
                     signal:magic.io.file.list-recursively
                        .:x:@.dp/#
                     for-each:x:@signal/*
                        if
                           strings.ends-with:x:@.dp/#
                              .:.hl
                           .lambda
                              io.file.execute:x:@.dp/#
